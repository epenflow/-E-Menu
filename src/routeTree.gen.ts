/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as PrivateImport } from "./routes/_private";

// Create Virtual Routes

const PrivateDashboardIndexLazyImport = createFileRoute(
	"/_private/dashboard/",
)();

// Create/Update Routes

const PrivateRoute = PrivateImport.update({
	id: "/_private",
	getParentRoute: () => rootRoute,
} as any);

const PrivateDashboardIndexLazyRoute = PrivateDashboardIndexLazyImport.update({
	id: "/dashboard/",
	path: "/dashboard/",
	getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
	import("./routes/_private/dashboard/index.lazy").then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/_private": {
			id: "/_private";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof PrivateImport;
			parentRoute: typeof rootRoute;
		};
		"/_private/dashboard/": {
			id: "/_private/dashboard/";
			path: "/dashboard";
			fullPath: "/dashboard";
			preLoaderRoute: typeof PrivateDashboardIndexLazyImport;
			parentRoute: typeof PrivateImport;
		};
	}
}

// Create and export the route tree

interface PrivateRouteChildren {
	PrivateDashboardIndexLazyRoute: typeof PrivateDashboardIndexLazyRoute;
}

const PrivateRouteChildren: PrivateRouteChildren = {
	PrivateDashboardIndexLazyRoute: PrivateDashboardIndexLazyRoute,
};

const PrivateRouteWithChildren =
	PrivateRoute._addFileChildren(PrivateRouteChildren);

export interface FileRoutesByFullPath {
	"": typeof PrivateRouteWithChildren;
	"/dashboard": typeof PrivateDashboardIndexLazyRoute;
}

export interface FileRoutesByTo {
	"": typeof PrivateRouteWithChildren;
	"/dashboard": typeof PrivateDashboardIndexLazyRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/_private": typeof PrivateRouteWithChildren;
	"/_private/dashboard/": typeof PrivateDashboardIndexLazyRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "" | "/dashboard";
	fileRoutesByTo: FileRoutesByTo;
	to: "" | "/dashboard";
	id: "__root__" | "/_private" | "/_private/dashboard/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	PrivateRoute: typeof PrivateRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	PrivateRoute: PrivateRouteWithChildren,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_private"
      ]
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/dashboard/"
      ]
    },
    "/_private/dashboard/": {
      "filePath": "_private/dashboard/index.lazy.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
